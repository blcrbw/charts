<?php

/**
 * @file
 * Base charts functionality.
 */

/**
 * Implements hook_menu().
 */
function fg_charts_menu() {
  $items['admin/config/fg-charts'] = [
    'page callback' => 'drupal_get_form',
    'page arguments' => ['fg_charts_settings_form'],
    'access arguments' => ['administer site'],
  ];
}

/**
 * Implements hook_node_presave().
 */
function fg_charts_node_presave($node) {
  if ($node->type === 'charts') {
    if (!empty($node->field_openface_csv[LANGUAGE_NONE][0]['fid']) && ($of_csv = file_load($node->field_openface_csv[LANGUAGE_NONE][0]['fid']))) {
      $of_csv = file_load($node->field_openface_csv[LANGUAGE_NONE][0]['fid']);
      $emo_csv = fg_charts_emotion_csv_prepare($of_csv->uri);
    }
    if (!empty($emo_csv)) {
      $node->field_emotions_csv[LANGUAGE_NONE][0] = (array) $emo_csv;
      $node->field_emotions_csv[LANGUAGE_NONE][0]['display'] = 1;
      $emo_json = fg_charts_emotion_json_prepare($emo_csv->uri);
    }
    if (!empty($emo_json)) {
      $node->field_emotions_json[LANGUAGE_NONE][0] = (array) $emo_json;
      $node->field_emotions_json[LANGUAGE_NONE][0]['display'] = 1;
      $scene_csv = fg_charts_scene_csv_prepare($emo_json->uri);
    }
    if (!empty($scene_csv)) {
      $node->field_scene_csv[LANGUAGE_NONE][0] = (array) $scene_csv;
      $node->field_scene_csv[LANGUAGE_NONE][0]['display'] = 1;
    }
  }
}

/**
 * Parse csv file to array.
 *
 * @param string $filename
 *  File path
 * @param string $delimiter
 *  CSV delimiter
 *
 * @return array|bool
 */
function fg_charts_csv_to_array($filename = '', $delimiter = ',') {
  if (!file_exists($filename) || !is_readable($filename)) {
    return FALSE;
  }
  $header = NULL;
  $data = [];
  if (($handle = fopen($filename, 'r')) !== FALSE) {
    while (($row = fgetcsv($handle, NULL, $delimiter)) !== FALSE) {
      if (!$header) {
        $header = $row;
      }
      else {
        $data[] = array_combine($header, $row);
      }
    }
    fclose($handle);
  }

  return $data;
}

/**
 * Return emotions config.
 */
function fg_charts_emotion_config_get() {
  return [
    'happy' => [
      '+' => [
        ['06', '12',],
        //['12',],
      ],
      '-' => [],
    ],
    'sad' => [
      '+' => [
        ['01', '04', '15',],
        ['01', '04', '11',],
        ['01', '04', '15', '54', '64',],
        ['01', '04', '15', '17',],
        ['01', '04', '11', '17', '54', '64',],
        ['11', '15', '54', '64',],
        ['11', '17',],
      ],
      '-' => [],
    ],
    'surprise' => [
      '+' => [
        ['01', '02', '05', '26',],
        ['01', '02', '05',],
        ['01', '02', '26',],
        ['05', '26',],
      ],
      '-' => [],
    ],
    'fear' => [
      '+' => [
        ['01', '02', '04', '05', '07', '20', '26',],
        ['01', '02', '04', '05', '20', '25',],
        ['01', '02', '04', '05', '20', '26',],
        ['01', '02', '04', '05',],
        ['01', '02', '05'],
        ['01', '02', '05', '25',],
        ['01', '02', '05', '26',],
        ['05', '20',],
        ['05', '20', '25',],
        ['05', '20', '26',],
      ],
      '-' => [],
    ],
    'anger' => [
      '+' => [
        ['04', '05', '07', '23',],
        ['04', '05', '07', '10', '22', '23', '25',],
        ['04', '05', '07', '10', '22', '23', '26',],
        ['04', '05', '07', '22', '23', '25',],
        ['04', '05', '07', '22', '23', '26',],
        ['04', '05', '07', '10', '23', '25',],
        ['04', '05', '07', '10', '23', '26',],
        ['04', '05', '07', '23', '25',],
        ['04', '05', '07', '23', '26',],
        ['04', '05', '07', '17', '23',],
        ['04', '05', '07', '17', '24',],
        ['04', '05', '07', '23',],
        ['04', '05', '07', '24',],
        ['04', '05', '10', '22', '23', '25',],
        ['04', '05', '10', '22', '23', '26',],
        ['04', '05', '10', '23', '25',],
        ['04', '05', '10', '23', '26',],
        ['04', '05', '23', '25',],
        ['04', '05', '23', '26',],
        ['04', '05', '17', '23',],
        ['04', '05', '17', '24',],
        ['04', '05', '23',],
        ['04', '05', '24',],
        ['04', '07', '10', '22', '23', '25',],
        ['04', '07', '10', '22', '23', '26',],
        ['04', '07', '10', '23', '25',],
        ['04', '07', '10', '23', '26',],
        ['04', '07', '23', '25',],
        ['04', '07', '23', '26',],
        ['04', '07', '17', '23',],
        ['04', '07', '17', '24',],
        ['04', '07', '23',],
        ['04', '07', '24',],
        ['05', '07', '10', '22', '23', '25',],
        ['05', '07', '10', '22', '23', '26',],
        ['05', '07', '10', '23', '25',],
        ['05', '07', '10', '23', '26',],
        ['05', '07', '23', '25',],
        ['05', '07', '23', '26',],
        ['05', '07', '17', '23',],
        ['05', '07', '17', '24',],
        ['05', '07', '23',],
        ['05', '07', '24',],
      ],
      '-' => [],
    ],
    'disgust' => [
      '+' => [
        ['09', '15'],
        ['09', '16', '15',],
        ['09', '16', '26',],
        ['10', '16', '25',],
        ['10', '16', '26',],
        ['09', '17',],
        ['10', '17',],
        //['10',],
      ],
      '-' => [],
    ],
    'contempt' => [
      '+' => [
        ['12', '14',],
      ],
      '-' => [],
    ],
  ];
}

/**
 * Prepare emotions csv.
 *
 * @param $of_csv_path
 */
function fg_charts_emotion_csv_prepare($of_csv_path) {
  $result = FALSE;

  // @TODO: replace with variable.
  $au_threshold = 0.1;

  $input_path = drupal_realpath($of_csv_path);
  if (file_exists($input_path)) {
    $csv = fg_charts_csv_to_array($input_path, ',');
  }

  if (!empty($csv)) {
    $emotion_config = fg_charts_emotion_config_get();

    $glue = ',';
    $output_rows = [
      implode($glue, [
        '"frame"',
        '"timestamp"',
        '"happy_total"',
        '"sad_total"',
        '"surprise_total"',
        '"fear_total"',
        '"anger_total"',
        '"disgust_total"',
        '"contempt_total"',
      ]),
    ];
    foreach ($csv as $row) {
      $row_data = [];
      $row_data['frame'] = $row['frame'];
      $row_data[' timestamp'] = trim($row[' timestamp']);
      foreach ($emotion_config as $emotion => $emotion_settings) {
        $positive = 0;
        $negative = 0;
        //try {
          if (!empty($emotion_settings['+'])) {
            $variants = [];
            foreach ($emotion_settings['+'] as $action_unit_set) {
              $variant = 0;
              foreach ($action_unit_set as $action_unit) {
                if (empty($row[' AU' . $action_unit . '_r']) || $row[' AU' . $action_unit . '_r'] < $au_threshold) {
                  //break;
                  //throw new Exception('AU value is too low. Frame: ' . $row["frame"]);
                }
                else {
                  $variant += $row[' AU' . $action_unit . '_r'];
                }
              }
              $variants[] = $variant / count($action_unit_set);
            }
            $positive = max($variants);
          }
        //}
        //catch (Exception $e) {
        //  $positive = 0;
        //}
        //try {
          if (!empty($emotion_settings['-'])) {
            foreach ($emotion_settings['-'] as $action_unit) {
              $negative = 0;
              if (empty($row[' AU' . $action_unit . '_r']) || $row[' AU' . $action_unit . '_r'] < $au_threshold) {
                //break;
                //throw new Exception('AU value is too low. Frame: ' . $row["frame"]);
              }
              else {
                $negative += $row[' AU' . $action_unit . '_r'];
              }
            }
            $negative = $negative / count($emotion_settings['-']);
          }
        //}
        //catch (Exception $e) {
        //  $negative = 0;
        //}
        $total = $positive - $negative;
        $row_data[$emotion . '_total'] = number_format($total, 6, '.', '');
      }
      $output_rows[] = implode($glue, $row_data);
    }

    $output = implode(PHP_EOL, $output_rows);

    if (!empty($output)) {
      $result = file_save_data($output, 'private://' . md5($output) . '.csv');
    }
  }

  return $result;
}

/**
 * Prepare emotion json for charts.
 *
 * @param $emo_csv_path
 *
 * @return bool|\stdClass
 */
function fg_charts_emotion_json_prepare($emo_csv_path) {
  $result = FALSE;
  $input_path = drupal_realpath($emo_csv_path);
  if (file_exists($input_path)) {
    $csv = fg_charts_csv_to_array($input_path, ',');
  }

  $data = [];
  foreach ($csv as $row) {
    foreach ($row as $header => $value) {
      $data[$header][] = (float) $value;
    }
  }

  $json_array = [
    "xData" => $data['timestamp'],
  ];
  foreach ($data as $header => $values) {
    $json_array['datasets'][] = [
      "name" => $header,
      "data" => $values,
      "unit" => "points",
      "type" => "line",
      "valueDecimals" => 1,
    ];
  }

  $json = json_encode($json_array);
  if (!empty($json)) {
    $result = file_save_data($json, 'private://' . md5($json) . '.json');
  }

  return $result;
}

/**
 * Prepare scene csv for charts.
 *
 * @param string $emo_json_path
 *
 * @return bool|\stdClass
 */
function fg_charts_scene_csv_prepare($emo_json_path) {
  $result = FALSE;

  $limit = 0.7;
  $input_path = drupal_realpath($emo_json_path);
  $data = [];
  $scenes = [];
  if (file_exists($input_path)) {
    $json = file_get_contents($input_path);
    $data = drupal_json_decode($json);
  }
  $datasets = [];
  if (!empty($data['xData']) && !empty($data['datasets'])) {
    foreach ($data['datasets'] as $dataset) {
      if (!in_array($dataset['name'], ['frame', 'timestamp'])) {
        $datasets[$dataset['name']] = array_combine($data['xData'], $dataset['data']);
      }
    }
  }

  foreach ($datasets as $name => $data) {
    $scene = ['from' => NULL, 'to' => NULL, 'comment' => $name, 'max_value' => NULL, 'max_time' => NULL];
    $empty_time = FALSE;
    $current_time = 0;
    foreach ($data as $time => $value) {
      if ((int) $time !== $current_time) {
        if (!empty($empty_time) && !empty($scene['from'])) {
          $scene['to'] = $current_time - 1;
          $scenes[] = $scene;
          $scene = ['from' => NULL, 'to' => NULL, 'comment' => $name, 'max_value' => NULL, 'max_time' => NULL];
        }
        $empty_time = TRUE;
      }
      $current_time = (int) $time;
      if ($value >= $limit) {
        $empty_time = FALSE;
        if (empty($scene['from'])) {
          $scene['from'] = (int) $time;
          $scene['max_time'] = $current_time;
          $scene['max_value'] = $value;
        }
        elseif ($value > $scene['max_value']) {
          $scene['max_time'] = $current_time;
          $scene['max_value'] = $value;
        }
      }
    }
  }

  $glue = ',';
  $output_rows = [
    implode($glue, [
      '"from"',
      '"to"',
      '"comment"',
    ]),
  ];
  foreach ($scenes as $scene) {
    $output_rows[] = implode($glue, [
      $scene['from'],
      $scene['to'],
      '"' . $scene['comment'] . '"',
    ]);

    $output_rows[] = implode($glue, [
      $scene['max_time'],
      '',
      $scene['max_value'],
    ]);
  }

  $output = implode(PHP_EOL, $output_rows);;
  if (!empty($output)) {
    $result = file_save_data($output, 'private://' . md5($output) . '.csv');
  }

  return $result;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function fg_charts_preprocess_node(&$variables) {
  if (!empty($variables['node']->field_emotions_json[LANGUAGE_NONE][0]['fid'])) {
    $json_file = file_load($variables['node']->field_emotions_json[LANGUAGE_NONE][0]['fid']);
    $json = file_get_contents(drupal_realpath($json_file->uri));
    drupal_add_js(array('chartsJSON' => $json), 'setting');

    //@TODO: replace with variable.
    $css_width = 1800;
    $css_height = 100;

    drupal_add_css(".chart {
        min-width: {$css_width}px;
        max-width: {$css_width}px;
        height: {$css_height}px;
        margin: 0;
      }", ['type' => 'inline']);

    drupal_add_js('https://code.highcharts.com/highcharts.js', 'external');
    drupal_add_js('https://code.highcharts.com/modules/data.js', 'external');
    $module_path = drupal_get_path('module', 'fg_charts');
    drupal_add_js($module_path . '/js/fg-charts.js', 'file');
    //drupal_add_js($module_path . '/js/fg-charts_new.js', 'file');
  }
}
